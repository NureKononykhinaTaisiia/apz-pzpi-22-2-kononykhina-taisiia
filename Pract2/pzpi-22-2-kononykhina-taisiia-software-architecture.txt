         Міністерство освіти і науки України Харківський національний університет радіоелектроніки


Кафедра програмної інженерії








Звіт
З дисципліни «Архітектура програмного забезпечення» З практичної роботи №2







Виконавець:
ст. гр. ПЗПІ-22-2	Кононихіна Т.Р.

Перевірив:
доц. каф. ПІ	Лещинський В.О.





Харків 2025

Архітектура Х (Стара назва Twitter)

     У цій презентації ми розглянемо, як працює архітектура систем обробки даних у реальному часі в Х (раніше Twitter), які технології застосовуються та як забезпечуються продуктивність, масштабованість і безпека. Системи реального часу активно використовуються для обробки величезних обсягів інформації та надання користувачам миттєвих відповідей.

Основні виклики
     Системи обробки даних у реальному часі повинні відповідати кільком ключовим вимогам:
1. Висока продуктивність: забезпечення швидкої обробки та передачі даних;
2. Масштабованість: здатність системи працювати з постійно зростаючою кількістю користувачів і даних;
3. Надійність: стійкість до збоїв та можливість швидкого відновлення у разі аварій;
4. Безпека: захист даних від несанкціонованого доступу та збереження їхньої цілісності;
5. Гнучкість: можливість адаптувати систему до змін у вимогах та умовах використання.

Технології та підходи
1. Розподілена архітектура: системи обробки даних у реальному часі в Х побудовані на основі розподілених обчислень. Це дозволяє розподіляти навантаження між кількома серверами, забезпечуючи продуктивність та стійкість до збоїв;

2. Мікросервісна архітектура: використання незалежних сервісів, кожен з яких виконує конкретні функції (обробка постів, стрічка новин, аутентифікація тощо). Цей підхід полегшує процеси оновлення та масштабування, оскільки сервіси можна змінювати незалежно один від одного;
3. Технології кешування:
● Redis: Зберігання найбільш часто використовуваних даних (наприклад, стрічок новин) для забезпечення швидкого доступу;
4. Балансування навантаження (Load Balancers): розподіл запитів між серверами для уникнення перевантаження окремих компонентів системи;
5. Системи зберігання даних:
● реляційні бази даних (MySQL, PostgreSQL): для зберігання структурованих даних;
● нереляційні бази даних (Cassandra, Redis): для зберігання неструктурованих даних з високою доступністю;
6. Системи обробки потоків даних:
● Apache Kafka: для обробки потоків даних у реальному часі. Застосовується для аналітики, моніторингу та обміну подіями між сервісами.

Виклики та шляхи їхнього вирішення
1. Високе навантаження на сервери: використання Load Balancers та розподіленої архітектури для рівномірного розподілу навантаження;
2. Масштабування	баз	даних:	впровадження	мікросервісів	та використання спеціалізованих баз даних для різних типів даних;

3. Забезпечення	безпеки:	використання	шифрування,	багаторівневого захисту та методів аутентифікації.




























