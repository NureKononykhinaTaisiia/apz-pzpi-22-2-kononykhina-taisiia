         Міністерство освіти і науки України Харківський національний університет радіоелектроніки


Кафедра програмної інженерії






Звіт
З дисципліни «Архітектура програмного забезпечення» З лабораторної роботи №3
На тему: «РОЗРОБКА ПРОГРАМНОЇ АРХІТЕКТУРИ ТА СТВОРЕННЯ І ВІДЛАГОДЖЕННЯ ПРОГРАМНОГО КОДУ ПРИСТРОЮ ІНТЕРНЕТУ РЕЧЕЙ (IOT) АБО РОЗУМНОГО ПРИСТРОЯ (SMART DEVICE) ПРОГРАМНОЇ СИСТЕМИ»






Виконавець:
ст. гр. ПЗПІ-22-2	Кононихіна Т.Р.

Перевірив:
доц. каф. ПІ	Сокорчук І. П.





Харків 2025

     Назва проекту: Програмна система для оренди спорядження для хобі та розваг.

1 МЕТА РОБОТИ


     Метою даної лабораторної роботи є розробка клієнтської частини програмної системи.

2 ОПИС ВИКОНАНОЇ РОБОТИ

     У рамках виконання завдання було реалізовано клієнтську частину вебдодатку. Розробка розпочалася з проєктування структури взаємодії між пристроєм, серверною частиною та користувацьким інтерфейсом. На початковому етапі було налаштовано серверне середовище на Node.js та MongoDB, що забезпечило ефективне зберігання й обробку даних, отриманих від пристрою.
     Основна увага під час розробки була зосереджена на побудові стабільного каналу передачі даних від пристрою до серверної частини та реалізації REST API для подальшої взаємодії з вебклієнтом. 
     Значна частина роботи стосувалася налагодження взаємодії між пристроєм і сервером: було реалізовано обробку подій, перевірку достовірності запитів, збереження показників у базі даних. Для візуалізації було створено UML-діаграми, такі як:  UML-діаграму прецедентів (Use Case Diagram), UML-діаграму взаємодії (Interaction Overview Diagram), UML-діаграми діяльності (Activity Diagram), UML-діаграму пакетів (Package Diagram).
     Для зручності та безпеки було впроваджено JWT-аутентифікацію, логування запитів, обробку помилок та захист API. У результаті виконаної роботи створено функціональний сервер, що підтримує інтеграцію з розумним пристроєм, забезпечує стабільну передачу даних, зберігання інформації та подальший доступ користувача до неї через клієнтський інтерфейс.
     
3 ХІД РОБОТИ
	
     На першому етапі було створено UML-діаграму прецедентів (Use Case Diagram), яка описує функціональність програмної системи та способи взаємодії користувачів (рис. 3.1). У діаграмі представлені два основних актори — користувач і адміністратор. Вказано їхні дії в межах системи, зокрема вхід, реєстрація, перегляд товарів, керування кошиком, оформлення замовлення, а також керування категоріями та товарами. MongoDB зображено як компонент, що взаємодіє з усіма ключовими процесами зберігання даних.


Рисунок 3.1 - UML-діаграму прецедентів (Use Case Diagram)


		Далі було побудовано UML-діаграму взаємодії (Interaction Overview Diagram), яка демонструє послідовність виконання основного користувацького сценарію — від моменту відкриття застосунку до оформлення замовлення (рис. 3.2). Діаграма ілюструє ключові етапи: авторизацію, перегляд товарів, додавання до кошика, підтвердження дії та збереження замовлення в базі даних.

Рисунок 3.2 - UML-діаграму взаємодії (Interaction Overview Diagram)




	Наступним кроком стала побудова UML-діаграми діяльності (Activity Diagram), яка описує деталізований процес оформлення замовлення (рис. 3.3). У діаграмі послідовно показані всі дії користувача та серверної частини, включаючи перевірку кошика, передачу даних, створення замовлення та збереження у MongoDB.


Рисунок 3.3 - UML-діаграми діяльності (Activity Diagram)


	Завершальним етапом було створено UML-діаграму пакетів (Package Diagram), яка відображає логічну структуру проєкту (рис. 3.4). У діаграмі виокремлено три основні шари: Frontend, Backend та Database. У межах Backend розділено функціональні пакети, такі як auth, cart, order, user, admin, product, які взаємодіють із базою даних MongoDB. Всі API використовуються клієнтським інтерфейсом — веб або мобільним застосунком.



Рисунок 3.4 - UML-діаграму пакетів (Package Diagram)


4 ВИСНОВКИ

	У результаті виконання лабораторної роботи було реалізовано базову архітектуру взаємодії між пристроєм, сервером і клієнтськими застосунками, що забезпечує приймання, обробку та збереження даних у реальному часі. Налагоджено обробку запитів, аутентифікацію користувачів, обробку даних та їх передачу в базу даних.
     Таким чином, було закладено основу для подальшого розширення функціональності системи розумного пристрою та її масштабування.

	







