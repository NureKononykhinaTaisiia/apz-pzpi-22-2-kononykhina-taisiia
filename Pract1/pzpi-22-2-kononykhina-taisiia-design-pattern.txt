Міністерство освіти і науки України Харківський національний університет радіоелектроніки


Кафедра програмної інженерії








Звіт
З дисципліни «Архітектура програмного забезпечення» З практичної роботи №1







Виконавець:
ст. гр. ПЗПІ-22-2	Кононихіна Т.Р.

Перевірив:
доц. каф. ПІ	Лещинський В.О.





Харків 2025

Патерн проєктування - State


Патерн проєктування State є одним із поведінкових патернів, що дозволяє об'єктам змінювати свою поведінку залежно від поточного стану.

Історія та еволюція патерну
Патерн "State" був запропонований ще у 90-х роках в рамках "Design Patterns: Elements of Reusable Object-Oriented Software" ("Банда Чотирьох"). З того часу патерн широко використовується у розробці програмного забезпечення для створення гнучких систем з можливістю динамічної зміни поведінки.

Проблеми, які вирішує патерн:
1. Усунення численних умовних операторів та вкладених структур (if-else, switch-case);
2. Забезпечення можливості легко додавати або змінювати поведінку програми без порушення існуючого коду;
3. Підвищення гнучкості програми та забезпечення кращої організації коду.

Застосування у реальних проєктах
Патерн "State" часто використовується у таких сценаріях:
1. Розробка графічних інтерфейсів (GUI), де кнопки або елементи змінюють свою поведінку в залежності від стану (активний, неактивний, натиснутий);
2. Програмування ігрових систем — управління поведінкою ігрових персонажів (атака, захист, переміщення);

3. Управління транзакціями у фінансових програмах (підтвердження, обробка, відхилення).

Альтернативи патерну "State"
1. Використання умовних операторів (if-else, switch) — менш гнучке рішення, що ускладнює підтримку та розширення;
2. Стратегія (Strategy) — схожий патерн, але з іншим призначенням: забезпечення змінюваної поведінки об'єктів шляхом підстановки алгоритмів, а не станів.

Порівняння з іншими патернами


Патерн
Основне призначення
Відмінність від State
State
Зміна поведінки в залежності від стану
Динамічна зміна поведінки через класи станів
Strategy
Заміна алгоритмів без зміни класу клієнта
Фокус на алгоритмах, а не на станах
Observer
Реакція на події, що відбуваються в системі
Не передбачає зміну стану об'єкта
Command
Інкапсуляція дій у вигляді об’єктів
Зберігання дій для подальшого виконання


Слайди презентації наведені нижче.




























